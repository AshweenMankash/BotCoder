"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const Recognizers = require("@microsoft/recognizers-text-choice");
const choices_1 = require("../choices");
const prompt_1 = require("./prompt");
/**
 * Prompts a user to confirm something with a "yes" or "no" response.
 *
 * @remarks
 * By default the prompt will return to the calling dialog a `boolean` representing the users
 * selection.
 */
class ConfirmPrompt extends prompt_1.Prompt {
    /**
     * Creates a new ConfirmPrompt instance.
     * @param dialogId Unique ID of the dialog within its parent `DialogSet` or `ComponentDialog`.
     * @param validator (Optional) validator that will be called each time the user responds to the prompt.
     * @param defaultLocale (Optional) locale to use if `TurnContext.activity.locale` is not specified. Defaults to a value of `en-us`.
     */
    constructor(dialogId, validator, defaultLocale) {
        super(dialogId, validator);
        this.style = prompt_1.ListStyle.auto;
        this.defaultLocale = defaultLocale;
    }
    async onPrompt(context, state, options, isRetry) {
        // Format prompt to send
        let prompt;
        const channelId = context.activity.channelId;
        const culture = this.determineCulture(context.activity);
        const choiceOptions = this.choiceOptions || ConfirmPrompt.defaultChoiceOptions[culture].options;
        const choices = this.confirmChoices || ConfirmPrompt.defaultChoiceOptions[culture].choices;
        if (isRetry && options.retryPrompt) {
            prompt = this.appendChoices(options.retryPrompt, channelId, choices, this.style, choiceOptions);
        }
        else {
            prompt = this.appendChoices(options.prompt, channelId, choices, this.style, choiceOptions);
        }
        // Send prompt
        await context.sendActivity(prompt);
    }
    async onRecognize(context, state, options) {
        const result = { succeeded: false };
        const activity = context.activity;
        const utterance = activity.text;
        const culture = this.determineCulture(context.activity);
        const results = Recognizers.recognizeBoolean(utterance, culture);
        if (results.length > 0 && results[0].resolution) {
            result.succeeded = true;
            result.value = results[0].resolution.value;
        }
        else {
            // If the prompt text was sent to the user with numbers, the prompt should recognize number choices.
            const choiceOptions = this.choiceOptions || ConfirmPrompt.defaultChoiceOptions[culture].options;
            if (typeof choiceOptions.includeNumbers !== 'boolean' || choiceOptions.includeNumbers) {
                const confirmChoices = this.confirmChoices || ConfirmPrompt.defaultChoiceOptions[culture].choices;
                const choices = [confirmChoices[0], confirmChoices[1]];
                const secondOrMoreAttemptResults = choices_1.recognizeChoices(utterance, choices);
                if (secondOrMoreAttemptResults.length > 0) {
                    result.succeeded = true;
                    result.value = secondOrMoreAttemptResults[0].resolution.index === 0;
                }
            }
        }
        return result;
    }
    determineCulture(activity) {
        let culture = activity.locale || this.defaultLocale;
        if (!culture || !ConfirmPrompt.defaultChoiceOptions.hasOwnProperty(culture)) {
            culture = 'en-us';
        }
        return culture;
    }
}
/**
 * Default confirm choices for a range of locales.
 * @deprecated since version 4.3
 */
ConfirmPrompt.defaultConfirmChoices = {
    'es-es': ['Sí', 'No'],
    'nl-nl': ['Ja', 'Nee'],
    'en-us': ['Yes', 'No'],
    'fr-fr': ['Oui', 'Non'],
    'de-de': ['Ja', 'Nein'],
    'ja-jp': ['はい', 'いいえ'],
    'pt-br': ['Sim', 'Não'],
    'zh-cn': ['是的', '不']
};
/**
 * Default options for rendering the choices to the user based on locale.
 */
ConfirmPrompt.defaultChoiceOptions = {
    'es-es': { choices: ['Sí', 'No'], options: { inlineSeparator: ', ', inlineOr: ' o ', inlineOrMore: ', o ', includeNumbers: true } },
    'nl-nl': { choices: ['Ja', 'Nee'], options: { inlineSeparator: ', ', inlineOr: ' of ', inlineOrMore: ', of ', includeNumbers: true } },
    'en-us': { choices: ['Yes', 'No'], options: { inlineSeparator: ', ', inlineOr: ' or ', inlineOrMore: ', or ', includeNumbers: true } },
    'fr-fr': { choices: ['Oui', 'Non'], options: { inlineSeparator: ', ', inlineOr: ' ou ', inlineOrMore: ', ou ', includeNumbers: true } },
    'de-de': { choices: ['Ja', 'Nein'], options: { inlineSeparator: ', ', inlineOr: ' oder ', inlineOrMore: ', oder ', includeNumbers: true } },
    'ja-jp': { choices: ['はい', 'いいえ'], options: { inlineSeparator: '、 ', inlineOr: ' または ', inlineOrMore: '、 または ', includeNumbers: true } },
    'pt-br': { choices: ['Sim', 'Não'], options: { inlineSeparator: ', ', inlineOr: ' ou ', inlineOrMore: ', ou ', includeNumbers: true } },
    'zh-cn': { choices: ['是的', '不'], options: { inlineSeparator: '， ', inlineOr: ' 要么 ', inlineOrMore: '， 要么 ', includeNumbers: true } }
};
exports.ConfirmPrompt = ConfirmPrompt;
//# sourceMappingURL=confirmPrompt.js.map