"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const choices_1 = require("../choices");
const prompt_1 = require("./prompt");
/**
 * Prompts a user to select from a list of choices.
 *
 * @remarks
 * By default the prompt will return to the calling dialog a `FoundChoice` object containing the
 * choice that was selected.
 */
class ChoicePrompt extends prompt_1.Prompt {
    /**
     * Creates a new `ChoicePrompt` instance.
     * @param dialogId Unique ID of the dialog within its parent `DialogSet`.
     * @param validator (Optional) validator that will be called each time the user responds to the prompt. If the validator replies with a message no additional retry prompt will be sent.
     * @param defaultLocale (Optional) locale to use if `dc.context.activity.locale` not specified. Defaults to a value of `en-us`.
     */
    constructor(dialogId, validator, defaultLocale) {
        super(dialogId, validator);
        this.style = prompt_1.ListStyle.auto;
        this.defaultLocale = defaultLocale;
    }
    async onPrompt(context, state, options, isRetry) {
        // Determine locale
        let locale = context.activity.locale || this.defaultLocale;
        if (!locale || !ChoicePrompt.defaultChoiceOptions.hasOwnProperty(locale)) {
            locale = 'en-us';
        }
        // Format prompt to send
        let prompt;
        const choices = (this.style === prompt_1.ListStyle.suggestedAction ? choices_1.ChoiceFactory.toChoices(options.choices) : options.choices) || [];
        const channelId = context.activity.channelId;
        const choiceOptions = this.choiceOptions || ChoicePrompt.defaultChoiceOptions[locale];
        const choiceStyle = options.style || this.style;
        if (isRetry && options.retryPrompt) {
            prompt = this.appendChoices(options.retryPrompt, channelId, choices, choiceStyle, choiceOptions);
        }
        else {
            prompt = this.appendChoices(options.prompt, channelId, choices, choiceStyle, choiceOptions);
        }
        // Send prompt
        await context.sendActivity(prompt);
    }
    async onRecognize(context, state, options) {
        const result = { succeeded: false };
        const activity = context.activity;
        const utterance = activity.text;
        const choices = (this.style === prompt_1.ListStyle.suggestedAction ? choices_1.ChoiceFactory.toChoices(options.choices) : options.choices) || [];
        const opt = this.recognizerOptions || {};
        opt.locale = activity.locale || opt.locale || this.defaultLocale || 'en-us';
        const results = choices_1.recognizeChoices(utterance, choices, opt);
        if (Array.isArray(results) && results.length > 0) {
            result.succeeded = true;
            result.value = results[0].resolution;
        }
        return result;
    }
}
/**
 * Default options for rendering the choices to the user based on locale.
 */
ChoicePrompt.defaultChoiceOptions = {
    'es-es': { inlineSeparator: ', ', inlineOr: ' o ', inlineOrMore: ', o ', includeNumbers: true },
    'nl-nl': { inlineSeparator: ', ', inlineOr: ' of ', inlineOrMore: ', of ', includeNumbers: true },
    'en-us': { inlineSeparator: ', ', inlineOr: ' or ', inlineOrMore: ', or ', includeNumbers: true },
    'fr-fr': { inlineSeparator: ', ', inlineOr: ' ou ', inlineOrMore: ', ou ', includeNumbers: true },
    'de-de': { inlineSeparator: ', ', inlineOr: ' oder ', inlineOrMore: ', oder ', includeNumbers: true },
    'ja-jp': { inlineSeparator: '、 ', inlineOr: ' または ', inlineOrMore: '、 または ', includeNumbers: true },
    'pt-br': { inlineSeparator: ', ', inlineOr: ' ou ', inlineOrMore: ', ou ', includeNumbers: true },
    'zh-cn': { inlineSeparator: '， ', inlineOr: ' 要么 ', inlineOrMore: '， 要么 ', includeNumbers: true }
};
exports.ChoicePrompt = ChoicePrompt;
//# sourceMappingURL=choicePrompt.js.map