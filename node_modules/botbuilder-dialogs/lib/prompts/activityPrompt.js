"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const botbuilder_core_1 = require("botbuilder-core");
const dialog_1 = require("../dialog");
/**
 * Waits for an activity to be received.
 *
 * @remarks
 * This prompt requires a validator be passed in and is useful when waiting for non-message
 * activities like an event to be received. The validator can ignore received events until the
 * expected activity is received.
 */
class ActivityPrompt extends dialog_1.Dialog {
    /**
     * Creates a new ActivityPrompt instance.
     * @param dialogId Unique ID of the dialog within its parent `DialogSet` or `ComponentDialog`.
     * @param validator Validator that will be called each time a new activity is received.
     */
    constructor(dialogId, validator) {
        super(dialogId);
        this.validator = validator;
    }
    async beginDialog(dc, options) {
        // Ensure prompts have input hint set
        const opt = { ...options };
        if (opt.prompt && typeof opt.prompt === 'object' && typeof opt.prompt.inputHint !== 'string') {
            opt.prompt.inputHint = botbuilder_core_1.InputHints.ExpectingInput;
        }
        if (opt.retryPrompt && typeof opt.retryPrompt === 'object' && typeof opt.retryPrompt.inputHint !== 'string') {
            opt.retryPrompt.inputHint = botbuilder_core_1.InputHints.ExpectingInput;
        }
        // Initialize prompt state
        const state = dc.activeDialog.state;
        state.options = opt;
        state.state = {};
        // Send initial prompt
        await this.onPrompt(dc.context, state.state, state.options, false);
        return dialog_1.Dialog.EndOfTurn;
    }
    async continueDialog(dc) {
        // Perform base recognition
        const state = dc.activeDialog.state;
        const recognized = await this.onRecognize(dc.context, state.state, state.options);
        if (state.state['attemptCount'] === undefined) {
            state.state['attemptCount'] = 1;
        }
        // Validate the return value
        // - Unlike the other prompts a validator is required for an ActivityPrompt so we don't
        //   need to check for its existence before calling it.
        const isValid = await this.validator({
            context: dc.context,
            recognized: recognized,
            state: state.state,
            options: state.options,
            attemptCount: state.state['attemptCount']
        });
        // Return recognized value or re-prompt
        if (isValid) {
            return await dc.endDialog(recognized.value);
        }
        else {
            if (dc.context.activity.type === botbuilder_core_1.ActivityTypes.Message && !dc.context.responded) {
                await this.onPrompt(dc.context, state.state, state.options, true);
            }
            return dialog_1.Dialog.EndOfTurn;
        }
    }
    async resumeDialog(dc, reason, result) {
        // Prompts are typically leaf nodes on the stack but the dev is free to push other dialogs
        // on top of the stack which will result in the prompt receiving an unexpected call to
        // resumeDialog() when the pushed on dialog ends.
        // To avoid the prompt prematurely ending we need to implement this method and
        // simply re-prompt the user.
        await this.repromptDialog(dc.context, dc.activeDialog);
        return dialog_1.Dialog.EndOfTurn;
    }
    async repromptDialog(context, instance) {
        const state = instance.state;
        await this.onPrompt(context, state.state, state.options, true);
    }
    async onPrompt(context, state, options, isRetry) {
        if (isRetry && options.retryPrompt) {
            await context.sendActivity(options.retryPrompt, undefined, botbuilder_core_1.InputHints.ExpectingInput);
        }
        else if (options.prompt) {
            await context.sendActivity(options.prompt, undefined, botbuilder_core_1.InputHints.ExpectingInput);
        }
    }
    async onRecognize(context, state, options) {
        return { succeeded: true, value: context.activity };
    }
}
exports.ActivityPrompt = ActivityPrompt;
//# sourceMappingURL=activityPrompt.js.map