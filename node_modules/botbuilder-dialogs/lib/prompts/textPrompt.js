"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const botbuilder_core_1 = require("botbuilder-core");
const prompt_1 = require("./prompt");
/**
 * Prompts a user to enter some text.
 *
 * @remarks
 * By default the prompt will return to the calling dialog a `string` representing the users reply.
 */
class TextPrompt extends prompt_1.Prompt {
    /**
     * Creates a new TextPrompt instance.
     * @param dialogId Unique ID of the dialog within its parent `DialogSet` or `ComponentDialog`.
     * @param validator (Optional) validator that will be called each time the user responds to the prompt.
     */
    constructor(dialogId, validator) {
        super(dialogId, validator);
    }
    async onPrompt(context, state, options, isRetry) {
        if (isRetry && options.retryPrompt) {
            await context.sendActivity(options.retryPrompt, undefined, botbuilder_core_1.InputHints.ExpectingInput);
        }
        else if (options.prompt) {
            await context.sendActivity(options.prompt, undefined, botbuilder_core_1.InputHints.ExpectingInput);
        }
    }
    async onRecognize(context, state, options) {
        const value = context.activity.text;
        return typeof value === 'string' && value.length > 0 ? { succeeded: true, value: value } : { succeeded: false };
    }
}
exports.TextPrompt = TextPrompt;
//# sourceMappingURL=textPrompt.js.map